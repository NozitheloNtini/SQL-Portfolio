#Project Title: Spotify Top 50 2021 Analysis
#Project Overview & Purpose: This project analyses a 2021 Top 50 Charts. It focuses on metrics such as popularity, danceability, tempo, loudness, amongst other factors. 
#Project Questions:
-- 1. Which artists are popular?
-- 2. Which artists have more than one song in the chart?
-- 3. How loud are the songs?
-- 4. What are the fastest songs?
-- 5. What does the danceability measure to?
-- 6. What songs does Doja Cat have on the list?


-- Creating the table:

#CREATE TABLE Spotifydata (
    id               INTEGER        PRIMARY KEY,
    artist_name      VARCHAR        NOT NULL,
    track_name       VARCHAR        NOT NULL,
    track_id         VARCHAR        NOT NULL,
    popularity       INTEGER        NOT NULL,
    danceability     DECIMAL (4, 3) NOT NULL,
    energy           DECIMAL (4, 3) NOT NULL,
    song_key         INTEGER        NOT NULL,
    loudness         DECIMAL (5, 3) NOT NULL,
    song_mode        INTEGER        NOT NULL,
    speechiness      DECIMAL (5, 4) NOT NULL,
    acousticness     DECIMAL (6, 5) NOT NULL,
    instrumentalness DECIMAL (8, 7) NOT NULL,
    liveness         DECIMAL (5, 4) NOT NULL,
    valence          DECIMAL (4, 3) NOT NULL,
    tempo            DECIMAL (6, 3) NOT NULL,
    duration_ms      INTEGER        NOT NULL,
    time_signature   INTEGER        NOT NULL
);


-- 1. Popular artists
SELECT  artist_name, COUNT(*) AS artist_count
FROM BIT_DB.spotifydata
GROUP BY artist_name
ORDER BY artist_count DESC
LIMIT 5;

 
-- 2. Artists that appear more than once
SELECT artist_name, COUNT(*) AS frequency
FROM BIT_DB.spotifydata
GROUP BY artist_name
HAVING frequency > 1;


-- 3. Loudness
SELECT track_name, artist_name, loudness,
CASE WHEN loudness > -3 THEN 'Very Loud'
WHEN loudness > -6 THEN 'Loud'
WHEN loudness > -9 THEN 'Moderate'
ELSE 'Quiet'
END AS loudness_category
FROM BIT_DB.spotifydata
LIMIT 10;


-- 4. Fastest songs
SELECT artist_name, track_name, MAX (tempo) AS song_speed
FROM BIT_DB.spotifydata
GROUP BY artist_name
ORDER BY song_speed DESC
LIMIT 10;


-- 5. Average danceability
SELECT artist_name ,avg(danceability) AS avg_danceability
FROM BIT_DB.spotifydata
GROUP BY artist_name;


-- 6. Artist search
SELECT track_name, artist_name
FROM BIT_DB.Spotifydata
WHERE artist_name LIKE '%Doja Cat%';


#How to Run the Queries:
1. Ensure you have access to the Spotify database schema. 
2. Copy and paste the SQL schema and queries into a SQL environment. I recommend DBFiddle
3. Execute the queries to see the results.


#Technologies Used:
1. SQL
2. SQLiteStudio
3. DBFiddle (for online SQL testing and sharing)

#Business Conclusions
1. Identifying artists with multiple chart appearances can inform marketing strategies. Featured artists with high frequency can be targeted for collaborations or promotions
2. Artists with multiple songs in the chart can be prioritised for playlist inclusion. This ensures diverse content while leveraging popular artists.
3. Categorising songs by loudness can optimise playlist sequencing. Balancing loudness levels enhances listener engagement.
4. Identifying the fastest songs can inform workout or energy-boosting playlists. High-tempo songs can increase user engagement.
5. Analysing average danceability by artist can guide branding strategies. Artists with high danceability can be marketed for party or club events.
6. Developing artist-specific search functionality can enhance user experience. Quick access to favorite artists' tracks increases customer satisfaction.

#Recommendations:
Partner with popular artists for exclusive content.
Develop targeted playlists based on audio profiles (loudness, tempo, danceability).
Enhance music recommendation algorithms using artist and track attributes.
Optimise playlist sequencing for improved listener engagement.
Develop artist-based marketing campaigns to increase brand visibility.
