#Project Title: Customer & Order Analytics
#Project Overview and Purpose: In this SQL, I'm querying a database with multiple tables in it to quantify statistics about customer and order data. The project aims to provide insights into customer behavior, product popularity, revenue generation, and geographic sales trends. It analyses sales data for a specific business, focusing on January and February sales performance.
#Project Questions:
-- 1. How many orders were placed in January?
-- 2. How many of the above orders were for an iPhone?
-- 3. What are the account numbers for all the orders that were placed in February?
-- 4. Which product was the cheapest one sold in January, and what was the price?
-- 5. What is the total revenue for each product sold in January?
-- 6. Which products were sold in February at 548 Lincoln St, Seattle, WA 98101, how many of each were sold, and what was the total revenue?
-- 7. How many customers ordered more than 2 products at a time in February, and what was the average amount spent for those customers?
-- 8. Which products in Los Angeles were sold in February, and how many of each were sold?
-- 9.  Which locations in New York received at least 3 orders in January, and how many orders did they each receive?
-- 10. How many of each type of headphone were sold in February?
-- 11. What was the average amount spent per account in February?
-- 12. What was the average quantity of products purchased per account in February?
-- 13. Which product brought in the most revenue in January and how much revenue did it bring in total?

--To ensure data accuracy, queries were filtered to exclude inconsistent Order ID data (WHERE length(orderid) = 6 AND orderid <> 'Order ID'). This filter was applied where relevant, based on query requirements.


-- 1.Orders placed in January
SELECT COUNT(orderid) AS orders
FROM BIT_DB.JanSales
WHERE length(orderid) = 6
AND orderid <> 'Order ID';


-- 2. iPhone orders
SELECT COUNT(orderid) AS iPhone_orders
FROM BIT_DB.JanSales
WHERE Product = 'iPhone' 
AND length(orderid) = 6
AND orderid <> 'Order ID';


-- 3. Account numbers for February orders
SELECT distinct custo.acctnum
FROM  BIT_DB.FebSales febs
INNER JOIN BIT_DB.customers custo
ON febs.orderID = custo.order_id  
WHERE length(orderid) = 6
AND orderid <> 'Order ID';


-- 4. Cheapest order in January
SELECT distinct Product, MIN (price) AS price
FROM BIT_DB.JanSales
GROUP BY product
ORDER BY price
LIMIT 1;


-- 5. January Revenue
SELECT product, SUM(quantity)*price as Revenue
FROM BIT_DB.JanSales
GROUP BY product;


-- 6. Products sold to a certain address 
SELECT product, quantity, SUM(quantity)*price AS total_revenue
FROM BIT_DB.FebSales
WHERE location = '548 Lincoln St, Seattle, WA 98101';


-- 7. Orders in February and amount spent
SELECT COUNT(distinct custo.acctnum) AS number_of_customers,
avg(quantity*price) AS avg_spent
FROM BIT_DB.FebSales Febs
LEFT JOIN BIT_DB.customers custo
ON Febs.orderid=custo.order_id
WHERE Febs.Quantity>2
AND length(orderid) = 6
AND orderid <> 'Order ID';


-- 8. Los Angeles products
SELECT product, SUM(quantity) AS total_sold
FROM BIT_DB.FebSales
WHERE location LIKE '%los Angeles%'
GROUP BY product;


-- 9. New York orders
SELECT distinct location, count(orderID)
FROM BIT_DB.JanSales
WHERE location LIKE '%NY%'
AND length(orderid) = 6 
AND orderid <> 'Order ID'
GROUP BY location
HAVING count(orderID)>=3;


-- 10. Headphone sales in February
SELECT product, SUM (quantity) AS total_sold
FROM BIT_DB.FebSales
WHERE product LIKE '%headphone%'
GROUP BY product;


-- 11. Average spent in February
SELECT AVG (quantity*price) AS average_spent
FROM BIT_DB.customers cust
INNER JOIN BIT_DB.FebSales Feb
ON Feb.orderID = cust.order_id  
WHERE length(orderid) = 6
AND orderid <> 'Order ID';


-- 12. Average bought in February
SELECT SUM(quantity)/COUNT(cust.acctnum) AS average_quantity
FROM BIT_DB.customers cust
INNER JOIN BIT_DB.FebSales Feb
ON Feb.orderID = cust.order_id  
WHERE length(orderid) = 6
AND orderid <> 'Order ID';


-- 13. Product bringing most revenue in January
SELECT product, SUM(quantity*price) AS revenue
FROM BIT_DB.JanSales 
GROUP BY product
ORDER BY sum(quantity*price) DESC
LIMIT 1;


-- #Technologies Used:
-- 1. SQL
-- 2. SQLiteStudio


#Business Conclusion:
Orders and Customer Insights
1. Analysing total January orders can inform sales forecasting and resource allocation. Understanding order volume can optimise operational efficiency.
2. iPhone sales performance can evaluate the effectiveness of product marketing strategies. High iPhone sales can guide targeted promotions.
3. Customer account numbers for February orders can inform customer segmentation strategies. Understanding customer demographics can enhance targeted marketing.
Product Pricing and Revenue
4. Identifying the cheapest product sold in January can inform pricing strategies. Competitive pricing can increase sales.
5. Sales performance of specific products can inform inventory management and restocking decisions. Ensuring adequate stock levels can meet customer demand.
6. Revenue by product can evaluate product profitability. Optimising product mix can improve overall revenue.
Customer Behavior and Spending
7. Customer spending patterns in February can inform pricing and promotion strategies. Understanding average spend per account can optimise revenue.
8. Analysing orders in February from customers who purchased more than 2 products can inform product bundling strategies. Offering incentives for bulk purchases can increase revenue.
Location-Based Insights
9. Product sales in Los Angeles can guide targeted marketing initiatives. Understanding regional demand can optimize product distribution.
10. Locations in New York receiving at least 3 orders in January can inform targeted promotions. Geolocation-specific marketing can enhance customer engagement.
Product Performance
11. Headphone sales performance can evaluate product marketing strategies. High demand can guide inventory management.
12. Average spend per account in February can inform pricing strategies. Competitive pricing can increase sales.
13. The product generating the most revenue in January can guide product development and optimisation strategies. Identifying top-revenue products can optimise resource allocation.
